{"version":3,"sources":["app.js","area.directive.js","entity.directive.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["var solumaxEntityFinder = angular\r\n    .module('Solumax.Entity', [])\r\n    .factory('EntityPluginsFactory', function(\r\n        $http) {\r\n\r\n        var entityPluginsFactory = {};\r\n\r\n        var env = (window.location.hostname == '192.168.0.227' || window.location.hostname == 'localvagrant') ? 'dev' : 'prod'\r\n        var domain = env == 'dev' ? ('http://' + window.location.hostname + ':10777/') : 'https://entity.hondagelora.com/'\r\n\r\n        entityPluginsFactory.links = {\r\n            domain: domain,\r\n            redirectApp: {\r\n                entity: {\r\n                    openById: domain + 'redirect-app/entity/',\r\n                    new: domain + 'redirect-app/entity/new',\r\n                }\r\n            },\r\n            files: domain + 'plugins/v2/files/'\r\n        }\r\n\r\n        entityPluginsFactory.models = {\r\n            entity: {\r\n                index: function(params) {\r\n                    return $http.get(domain + 'entity/api/entity/', { params: params });\r\n                },\r\n                get: function(id) {\r\n                    return $http.get(domain + 'entity/api/entity/' + id);\r\n                },\r\n                update: function(id, entity) {\r\n                    return $http.post(domain + 'entity/api/entity/' + id, entity);\r\n                },\r\n            },\r\n            relationship: {\r\n                index: function(params) {\r\n                    return $http.get(domain + 'entity/api/relationship/', { params: params });\r\n                }\r\n            },\r\n            area: {\r\n                retrieve: function(filter, value) {\r\n                    return $http.get(domain + 'entity/api/area/', { params: { filter: filter, value: value } })\r\n                }\r\n            }\r\n        }\r\n\r\n        return entityPluginsFactory;\r\n    })","solumaxEntityFinder\r\n    .directive('areaSelector', function(\r\n        $sce,\r\n        EntityPluginsFactory) {\r\n\r\n        return {\r\n            templateUrl: $sce.trustAsResourceUrl(EntityPluginsFactory.links.files + 'area-selector.html'),\r\n            scope: {\r\n                innerprovinsi: '=provinsi',\r\n                innerkota: '=kota',\r\n                innerjeniskota: '=jenisKota',\r\n                innerkecamatan: '=kecamatan',\r\n                innerkelurahan: '=kelurahan',\r\n                innerkodepos: '=kodePos',\r\n            },\r\n            link: function(scope, elem, attrs) {\r\n\r\n                scope.load = function(filter, value) {\r\n\r\n                    EntityPluginsFactory.models.area.retrieve(filter, value)\r\n                        .then(function(res) {\r\n\r\n                            switch (filter) {\r\n                                case \"provinsi\":\r\n                                    scope.cities = res.data.data\r\n                                    break\r\n                                case \"kota\":\r\n                                    scope.kecamatans = res.data.data\r\n                                    break\r\n                                case \"kecamatan\":\r\n                                    scope.kelurahans = res.data.data\r\n                                    break\r\n                                case undefined:\r\n                                    scope.provinces = res.data.data\r\n                                    break\r\n                            }\r\n                        })\r\n\r\n                    scope['inner' + filter] = value\r\n                }\r\n                scope.load()\r\n\r\n\r\n            }\r\n        }\r\n\r\n    })","solumaxEntityFinder\r\n    .directive('entityFinderModal', function(\r\n        $sce, $http, $timeout,\r\n        EntityPluginsFactory) {\r\n\r\n        return {\r\n            templateUrl: $sce.trustAsResourceUrl(EntityPluginsFactory.links.files + 'entity-finder-modal.html'),\r\n            restrict: 'E',\r\n            scope: {\r\n                selectedEntity: \"=\",\r\n                additionalParams: \"@\",\r\n                onEntitySelected: \"&\",\r\n                searchOnly: \"@\",\r\n                relationshipIds: '@',\r\n            },\r\n            link: function(scope, elem, attrs) {\r\n\r\n                scope.modalId = Math.random().toString(36).substring(2, 7)\r\n\r\n                scope.relationshipIdsChecked = {}\r\n                scope.checkRelationship = function(relationship) {\r\n                    if (!_.get(scope.relationshipIdsChecked[relationship.id], 'checked')) {\r\n                        scope.relationshipIdsChecked[relationship.id] = {\r\n                            id: relationship.id,\r\n                            checked: true\r\n                        }\r\n                    } else {\r\n                        scope.relationshipIdsChecked[relationship.id] = {\r\n                            id: relationship.id,\r\n                            checked: false\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.registerNewEntity = function() {\r\n                    window.open(EntityPluginsFactory.links.redirectApp.entity.new);\r\n                }\r\n\r\n                scope.openInApp = function(entity) {\r\n                    window.open(EntityPluginsFactory.links.redirectApp.entity.openById + entity.id);\r\n                }\r\n\r\n                scope.select = function(entity) {\r\n\r\n                    scope.selectedEntity = entity;\r\n                    $timeout(function() {\r\n                        scope.onEntitySelected();\r\n                    }, 250);\r\n\r\n                    $('#entity-finder-modal-' + scope.modalId).modal('hide');\r\n                }\r\n\r\n                scope.search = function() {\r\n\r\n                    if (scope.additionalParams) {\r\n                        _.assign(scope.filter, JSON.parse(scope.additionalParams))\r\n                    }\r\n\r\n                    scope.filter.relationship_ids = _.flatMap(_.filter(scope.relationshipIdsChecked, { checked: true }), 'id').join(',')\r\n\r\n                    EntityPluginsFactory.models.entity.index(_.omit(scope.filter, ['pageIncrease', 'pageDecrease']))\r\n                        .then(function(res) {\r\n\r\n                            scope.entities = res.data.data;\r\n                            scope.meta = res.data.meta;\r\n                        });\r\n                }\r\n\r\n                EntityPluginsFactory.models.relationship.index()\r\n                    .then(function(res) {\r\n                        scope.relationships = res.data.data\r\n                    })\r\n\r\n                scope.filter = {\r\n                    paginate: 20,\r\n                    page: 1,\r\n                    order: 'likeness',\r\n                    pageIncrease: function() {\r\n                        this.page++;\r\n                    },\r\n                    pageDecrease: function() {\r\n                        this.page--;\r\n                    }\r\n                }\r\n\r\n                scope.$watch('relationshipIds', function(newVal) {\r\n                    if (newVal) {\r\n                        _.forEach(newVal.split(','), function(id) {\r\n                            scope.checkRelationship({ id: id })\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        };\r\n    })\r\n    .directive('entityRedirect', function(\r\n        EntityPluginsFactory) {\r\n\r\n        return {\r\n            template: '<a class=\"btn btn-xs btn-primary\" ng-click=\"open(entity)\">{{ entity.id || \"Belum Terdaftar. Klik Untuk Buat Baru\" }}</a>',\r\n            restrict: 'E',\r\n            scope: {\r\n                innerEntity: '=entity',\r\n                entityId: '@'\r\n            },\r\n            link: function(scope, elem, attrs) {\r\n\r\n                scope.$watch('innerEntity', function(newValue) {\r\n                    if (newValue) {\r\n                        scope.entity = scope.innerEntity\r\n                    }\r\n                })\r\n\r\n                attrs.$observe('entityId', function(newValue) {\r\n                    if (newValue) {\r\n                        scope.entity = {\r\n                            id: newValue\r\n                        }\r\n                    }\r\n                })\r\n\r\n                scope.open = function(entity) {\r\n                    if (entity) {\r\n                        window.open(EntityPluginsFactory.links.redirectApp.entity.openById + entity.id);\r\n                    } else {\r\n                        window.open(EntityPluginsFactory.links.redirectApp.entity.openById + entity.id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n    .directive('entityRetriever', function(\r\n        $timeout,\r\n        EntityPluginsFactory) {\r\n\r\n        return {\r\n            template: '<a ng-show=\"entityId\" class=\"btn btn-xs btn-primary\" ng-click=\"retrieve(entityId)\">Refresh Data</a>',\r\n            restrict: 'E',\r\n            scope: {\r\n                entityId: '@',\r\n                entity: '=',\r\n                onEntityRetrieved: '&',\r\n            },\r\n            link: function(scope, elem, attrs) {\r\n\r\n                scope.retrieve = function(entityId) {\r\n\r\n                    EntityPluginsFactory.models.entity.get(entityId)\r\n                        .then(function(res) {\r\n\r\n                            scope.entity = res.data.data;\r\n                            alert('Entity data berhasil direfresh');\r\n\r\n                            $timeout(function() {\r\n                                scope.onEntityRetrieved();\r\n                            }, 250);\r\n\r\n\r\n                        });\r\n\r\n                }\r\n            }\r\n        }\r\n    })\r\n    .directive('entityUpdaterModal', function(\r\n        $sce, $http, $timeout,\r\n        EntityPluginsFactory) {\r\n\r\n        return {\r\n            templateUrl: $sce.trustAsResourceUrl(EntityPluginsFactory.links.files + 'entity-updater-modal.html'),\r\n            restrict: 'AE',\r\n            scope: {\r\n                selectedEntity: \"=entity\",\r\n                entityId: \"@\",\r\n                onEntityUpdated: \"&\",\r\n                newPhoneNumber: \"@\",\r\n                newEntityData: \"=\"\r\n            },\r\n            link: function(scope, elem, attrs) {\r\n\r\n                scope.modalId = Math.random().toString(36).substring(2, 7)\r\n\r\n                if (scope.entityId) {\r\n\r\n                    attrs.$observe('entityId', function(newValue) {\r\n\r\n                        EntityPluginsFactory.models.entity.get(newValue)\r\n                            .then(function(res) {\r\n                                scope.entity = res.data.data\r\n                            })\r\n                    })\r\n\r\n                } else {\r\n                    scope.$watch('selectedEntity', function(newValue) {\r\n                        if (newValue) {\r\n                            scope.entity = newValue\r\n                        }\r\n                    })\r\n                }\r\n\r\n                scope.insertValues = function() {\r\n\r\n                    var updateableFields = [\"phone_number\", \"address\", \"ktp\", \"email\"]\r\n\r\n                    updateableFields.forEach(function(updateableField) {\r\n\r\n                        if (scope.newEntityData[updateableField]) {\r\n                            scope.entity[updateableField] = scope.newEntityData[updateableField]\r\n                        }\r\n                    })\r\n\r\n                    if (scope.newPhoneNumber) {\r\n                        scope.entity.phone_number = scope.newPhoneNumber\r\n                    }\r\n                }\r\n\r\n\r\n                scope.registerNew = function() {\r\n                    window.open(EntityPluginsFactory.links.domain + 'redirect-app/entity/new');\r\n                }\r\n\r\n                scope.openInApp = function(entity) {\r\n                    window.open(EntityPluginsFactory.links.domain + 'redirect-app/entity/' + entity.id);\r\n                }\r\n\r\n                scope.update = function(entity) {\r\n\r\n                    EntityPluginsFactory.models.entity.update(entity.id, entity)\r\n                        .then(function(res) {\r\n\r\n                            scope.entity = res.data.data;\r\n                            scope.selectedEntity = res.data.data;\r\n\r\n                            alert('Update berhasil');\r\n\r\n                            $timeout(function() {\r\n                                scope.onEntityUpdated();\r\n                            }, 250);\r\n\r\n\r\n                        });\r\n\r\n                }\r\n\r\n\r\n            }\r\n        };\r\n    })"]}